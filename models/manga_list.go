// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MangaList Represantation of the manga but little info
//
// Minimalistic information regarding the media that we are going to call manga.
// Useful for display in list views, like grid and such.
//
// swagger:model MangaList
type MangaList struct {

	// Banner image of the media
	//
	// This is the big picture of the manga. It usally same as the cover but their resolution differs
	//
	// Required: true
	// Format: uri
	BannerImage *strfmt.URI `json:"bannerImage"`

	// Cover image of the media
	//
	// The image that is going to presented as the manga
	// Required: true
	// Format: uri
	CoverImage *strfmt.URI `json:"coverImage"`

	// current chapter no
	//
	// Latest released chapter number of the manga known by the sources.
	//
	// Required: true
	CurrentChapter *int32 `json:"currentChapter"`

	// Description of the media
	//
	// This is the part that we display manga's description. What is it about, what will it tell.
	//
	Description string `json:"description,omitempty"`

	// Last chapter of the media
	//
	// Final chapter of the manga we know. If manga is on-going, then it will probably be a question mark
	//
	// Required: true
	// Max Length: 5
	// Min Length: 1
	FinalChapter *string `json:"finalChapter"`

	// The id of the manga
	//
	// Unique identifier for the manga.
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// Last update of the media
	//
	// This might be the trickiest thing on this list. It indicates the time latest update performed on this media.
	// The thing is, I am not sure what we should return from here. I mean, last edited time on the database or
	// last edited time on the source we are getting this manga before putting it in to the database.
	//
	// Required: true
	LastUpdate *string `json:"lastUpdate"`

	// Status of the media
	//
	// On going? Finished? Status of the manga.
	//
	// Required: true
	Status *string `json:"status"`

	// Known tags of the media
	//
	// One of the main identifiers of the manga. This depicts the so called genres of the manga.
	//
	// Unique: true
	Tags []string `json:"tags"`

	// Title of the media
	//
	// The title for the manga. Titles do not allow any formatting.
	//
	// Required: true
	// Max Length: 200
	// Min Length: 1
	Title *string `json:"title"`
}

// Validate validates this manga list
func (m *MangaList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBannerImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCoverImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentChapter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinalChapter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MangaList) validateBannerImage(formats strfmt.Registry) error {

	if err := validate.Required("bannerImage", "body", m.BannerImage); err != nil {
		return err
	}

	if err := validate.FormatOf("bannerImage", "body", "uri", m.BannerImage.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MangaList) validateCoverImage(formats strfmt.Registry) error {

	if err := validate.Required("coverImage", "body", m.CoverImage); err != nil {
		return err
	}

	if err := validate.FormatOf("coverImage", "body", "uri", m.CoverImage.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MangaList) validateCurrentChapter(formats strfmt.Registry) error {

	if err := validate.Required("currentChapter", "body", m.CurrentChapter); err != nil {
		return err
	}

	return nil
}

func (m *MangaList) validateFinalChapter(formats strfmt.Registry) error {

	if err := validate.Required("finalChapter", "body", m.FinalChapter); err != nil {
		return err
	}

	if err := validate.MinLength("finalChapter", "body", string(*m.FinalChapter), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("finalChapter", "body", string(*m.FinalChapter), 5); err != nil {
		return err
	}

	return nil
}

func (m *MangaList) validateLastUpdate(formats strfmt.Registry) error {

	if err := validate.Required("lastUpdate", "body", m.LastUpdate); err != nil {
		return err
	}

	return nil
}

func (m *MangaList) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *MangaList) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if err := validate.UniqueItems("tags", "body", m.Tags); err != nil {
		return err
	}

	for i := 0; i < len(m.Tags); i++ {

		if err := validate.MinLength("tags"+"."+strconv.Itoa(i), "body", string(m.Tags[i]), 2); err != nil {
			return err
		}

		if err := validate.Pattern("tags"+"."+strconv.Itoa(i), "body", string(m.Tags[i]), `\w[\w- ]+`); err != nil {
			return err
		}

	}

	return nil
}

func (m *MangaList) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	if err := validate.MinLength("title", "body", string(*m.Title), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", string(*m.Title), 200); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MangaList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MangaList) UnmarshalBinary(b []byte) error {
	var res MangaList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
