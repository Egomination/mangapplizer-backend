// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	// "mangapplizer-backend/restapi/operations/v1"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/vnd.mangapplizer.api.v1+json"
  ],
  "produces": [
    "application/vnd.mangapplizer.api.v1+json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This application contains very limited amount of the API end points to improve our\ndevelopment life cycle. This application' future is not bright yet.\n",
    "title": "Mangapplizer Monolith API",
    "version": "0.1.0"
  },
  "host": "0.0.0.0:9092",
  "basePath": "/api",
  "paths": {
    "/v1": {
      "get": {
        "description": "\"Just printing hello world message to the user\"\n",
        "tags": [
          "v1"
        ],
        "summary": "Get root of the API V1",
        "operationId": "getRoot",
        "responses": {
          "200": {
            "description": "Successfull Response",
            "schema": {
              "type": "string",
              "title": "Hello world"
            }
          },
          "401": {
            "description": "Authentication Error",
            "schema": {
              "$ref": "#/definitions/AuthenticationError"
            }
          }
        }
      }
    },
    "/v1/search/{manga}": {
      "get": {
        "description": "List of the searched manga",
        "tags": [
          "v1",
          "search",
          "manga"
        ],
        "summary": "List of searched media",
        "operationId": "getManga",
        "responses": {
          "200": {
            "description": "Successfull response",
            "schema": {
              "type": "array",
              "title": "MangaList",
              "items": {
                "$ref": "#/definitions/MangaList"
              }
            }
          },
          "401": {
            "description": "Authentication Error",
            "schema": {
              "$ref": "#/definitions/AuthenticationError"
            }
          }
        }
      },
      "parameters": [
        {
          "$ref": "#/parameters/mangaName"
        }
      ]
    }
  },
  "definitions": {
    "AuthenticationError": {
      "allOf": [
        {
          "$ref": "#/definitions/Error"
        },
        {
          "type": "object",
          "properties": {
            "field": {
              "description": "an optimal field name to which this validation error applies",
              "type": "string"
            }
          }
        }
      ]
    },
    "Error": {
      "description": "Contains all the properties any error response from the API will contain.\nSome of the props are optional so might be empty.\n",
      "type": "object",
      "title": "Error structure",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "The error code.",
          "type": "integer",
          "format": "int32"
        },
        "helpUrl": {
          "description": "Possible url for getting more help about the error",
          "type": "string",
          "format": "uri"
        },
        "message": {
          "description": "Human readable error explanation",
          "type": "string"
        }
      }
    },
    "MangaList": {
      "description": "Minimalistic information regarding the media that we are going to call manga.\nUseful for display in list views, like grid and such.\n",
      "type": "object",
      "title": "Represantation of the manga but little info",
      "required": [
        "title",
        "status",
        "currentChapter",
        "finalChapter",
        "coverImage",
        "bannerImage",
        "lastUpdate"
      ],
      "properties": {
        "bannerImage": {
          "description": "This is the big picture of the manga. It usally same as the cover but their resolution differs\n",
          "type": "string",
          "format": "uri",
          "title": "Banner image of the media"
        },
        "coverImage": {
          "description": "The image that is going to presented as the manga",
          "type": "string",
          "format": "uri",
          "title": "Cover image of the media"
        },
        "currentChapter": {
          "description": "Latest released chapter number of the manga known by the sources.\n",
          "type": "integer",
          "format": "int32",
          "title": "current chapter no"
        },
        "description": {
          "description": "This is the part that we display manga's description. What is it about, what will it tell.\n",
          "type": "string",
          "title": "Description of the media"
        },
        "finalChapter": {
          "description": "Final chapter of the manga we know. If manga is on-going, then it will probably be a question mark\n",
          "type": "string",
          "title": "Last chapter of the media",
          "maxLength": 5,
          "minLength": 1
        },
        "id": {
          "description": "Unique identifier for the manga.",
          "type": "integer",
          "format": "int64",
          "title": "The id of the manga",
          "readOnly": true
        },
        "lastUpdate": {
          "description": "This might be the trickiest thing on this list. It indicates the time latest update performed on this media.\nThe thing is, I am not sure what we should return from here. I mean, last edited time on the database or\nlast edited time on the source we are getting this manga before putting it in to the database.\n",
          "type": "string",
          "title": "Last update of the media"
        },
        "status": {
          "description": "On going? Finished? Status of the manga.\n",
          "type": "string",
          "title": "Status of the media"
        },
        "tags": {
          "description": "One of the main identifiers of the manga. This depicts the so called genres of the manga.\n",
          "type": "array",
          "title": "Known tags of the media",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "minLength": 2,
            "pattern": "\\w[\\w- ]+"
          }
        },
        "title": {
          "description": "The title for the manga. Titles do not allow any formatting.\n",
          "type": "string",
          "title": "Title of the media",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "principal": {
      "type": "string"
    }
  },
  "parameters": {
    "mangaName": {
      "type": "string",
      "description": "Name of the searched manga",
      "name": "manga",
      "in": "path",
      "required": true
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "apiKey",
      "name": "X-Token",
      "in": "header"
    }
  },
  "security": [
    {
      "key": []
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/vnd.mangapplizer.api.v1+json"
  ],
  "produces": [
    "application/vnd.mangapplizer.api.v1+json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "This application contains very limited amount of the API end points to improve our\ndevelopment life cycle. This application' future is not bright yet.\n",
    "title": "Mangapplizer Monolith API",
    "version": "0.1.0"
  },
  "host": "0.0.0.0:9092",
  "basePath": "/api",
  "paths": {
    "/v1": {
      "get": {
        "description": "\"Just printing hello world message to the user\"\n",
        "tags": [
          "v1"
        ],
        "summary": "Get root of the API V1",
        "operationId": "getRoot",
        "responses": {
          "200": {
            "description": "Successfull Response",
            "schema": {
              "type": "string",
              "title": "Hello world"
            }
          },
          "401": {
            "description": "Authentication Error",
            "schema": {
              "$ref": "#/definitions/AuthenticationError"
            }
          }
        }
      }
    },
    "/v1/search/{manga}": {
      "get": {
        "description": "List of the searched manga",
        "tags": [
          "v1",
          "search",
          "manga"
        ],
        "summary": "List of searched media",
        "operationId": "getManga",
        "responses": {
          "200": {
            "description": "Successfull response",
            "schema": {
              "type": "array",
              "title": "MangaList",
              "items": {
                "$ref": "#/definitions/MangaList"
              }
            }
          },
          "401": {
            "description": "Authentication Error",
            "schema": {
              "$ref": "#/definitions/AuthenticationError"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "description": "Name of the searched manga",
          "name": "manga",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "AuthenticationError": {
      "allOf": [
        {
          "$ref": "#/definitions/Error"
        },
        {
          "type": "object",
          "properties": {
            "field": {
              "description": "an optimal field name to which this validation error applies",
              "type": "string"
            }
          }
        }
      ]
    },
    "Error": {
      "description": "Contains all the properties any error response from the API will contain.\nSome of the props are optional so might be empty.\n",
      "type": "object",
      "title": "Error structure",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "description": "The error code.",
          "type": "integer",
          "format": "int32"
        },
        "helpUrl": {
          "description": "Possible url for getting more help about the error",
          "type": "string",
          "format": "uri"
        },
        "message": {
          "description": "Human readable error explanation",
          "type": "string"
        }
      }
    },
    "MangaList": {
      "description": "Minimalistic information regarding the media that we are going to call manga.\nUseful for display in list views, like grid and such.\n",
      "type": "object",
      "title": "Represantation of the manga but little info",
      "required": [
        "title",
        "status",
        "currentChapter",
        "finalChapter",
        "coverImage",
        "bannerImage",
        "lastUpdate"
      ],
      "properties": {
        "bannerImage": {
          "description": "This is the big picture of the manga. It usally same as the cover but their resolution differs\n",
          "type": "string",
          "format": "uri",
          "title": "Banner image of the media"
        },
        "coverImage": {
          "description": "The image that is going to presented as the manga",
          "type": "string",
          "format": "uri",
          "title": "Cover image of the media"
        },
        "currentChapter": {
          "description": "Latest released chapter number of the manga known by the sources.\n",
          "type": "integer",
          "format": "int32",
          "title": "current chapter no"
        },
        "description": {
          "description": "This is the part that we display manga's description. What is it about, what will it tell.\n",
          "type": "string",
          "title": "Description of the media"
        },
        "finalChapter": {
          "description": "Final chapter of the manga we know. If manga is on-going, then it will probably be a question mark\n",
          "type": "string",
          "title": "Last chapter of the media",
          "maxLength": 5,
          "minLength": 1
        },
        "id": {
          "description": "Unique identifier for the manga.",
          "type": "integer",
          "format": "int64",
          "title": "The id of the manga",
          "readOnly": true
        },
        "lastUpdate": {
          "description": "This might be the trickiest thing on this list. It indicates the time latest update performed on this media.\nThe thing is, I am not sure what we should return from here. I mean, last edited time on the database or\nlast edited time on the source we are getting this manga before putting it in to the database.\n",
          "type": "string",
          "title": "Last update of the media"
        },
        "status": {
          "description": "On going? Finished? Status of the manga.\n",
          "type": "string",
          "title": "Status of the media"
        },
        "tags": {
          "description": "One of the main identifiers of the manga. This depicts the so called genres of the manga.\n",
          "type": "array",
          "title": "Known tags of the media",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "minLength": 2,
            "pattern": "\\w[\\w- ]+"
          }
        },
        "title": {
          "description": "The title for the manga. Titles do not allow any formatting.\n",
          "type": "string",
          "title": "Title of the media",
          "maxLength": 200,
          "minLength": 1
        }
      }
    },
    "principal": {
      "type": "string"
    }
  },
  "parameters": {
    "mangaName": {
      "type": "string",
      "description": "Name of the searched manga",
      "name": "manga",
      "in": "path",
      "required": true
    }
  },
  "securityDefinitions": {
    "key": {
      "type": "apiKey",
      "name": "X-Token",
      "in": "header"
    }
  },
  "security": [
    {
      "key": []
    }
  ]
}`))
}
